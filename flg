#!/bin/bash

# FLG - Fast Lacells.db Generator
#
# Simple script to quickly download and generate lacells.db for LocalGSMBackend by n76
# https://github.com/n76/Local-GSM-Backend
# Uses both Mozilla Location Service and OpenCellID databases as source
# Based on lacells-creator by wvengen and n76
#
# Licensed under GPLv3 or later
# (C)2016 Sebastian Obrusiewicz
# sobrus@o2.pl

#DEFAULT_CONFIG_BEGIN
MCC="260|262"           #contry codes separated with "|", for example "260|262". Leave dot+asterisk ".*" for all countries
RADIO="GSM|UMTS|LTE"    #you can remove LTE if your phone does not support it
API_KEY="dev-usr--XXXX-XXXX-XXXX-XXXXXXXXXXXX"  #your OCID API key, one key can download database only once per day
TMP_DIR='/tmp'          #for CSV files only, use disk if you don't have enough RAM, AND remember to have enough disk space in /var/tmp for sqlite temporary files
KEEP_FILES=0              #whether to keep (1) or delete (0) the CSV files after processing
#DEFAULT_CONFIG_END

#USER_CONFIG_BEGIN
BINDIR=$( dirname "$(readlink -f "$0")" ) #"
if [[ -f "${BINDIR}/config" ]]; then
  . "${BINDIR}/config"
fi
#USER_CONFIG_END

NW=`date -u "+%Y-%m-%d"`
OCI_FILE=$TMP_DIR"/ocid.csv"	#opencellid temporary file name
MOZ_FILE=$TMP_DIR"/mozilla.csv"	#mozilla temporary file name

echo "Downloading data"
wget -qO- "http://opencellid.org/downloads/?apiKey=${API_KEY}&filename=cell_towers.csv.gz" | gunzip | egrep "^($RADIO),($MCC),"  > $OCI_FILE &
OP=$!
wget -qO- "https://d17pt8qph6ncyq.cloudfront.net/export/MLS-full-cell-export-${NW}T000000.csv.gz" | gunzip | egrep "^($RADIO),($MCC)," > $MOZ_FILE &
MO=$!
wait $OP
wait $MO

[[ ! -s $OCI_FILE && -s ${OCI_FILE}.bak ]] && { # download from OCI failed (e.g. due to download limit)
  echo "Download from OpenCellID failed, using backup CSV"
  mv ${OCI_FILE}.bak $OCI_FILE
}
[[ ! -s $MOZ_FILE && -s ${MOZ_FILE}.bak ]] && { # download from MOZ failed (for whatever reason)
  echo "Download from Mozilla failed, using backup CSV"
  mv ${MOZ_FILE}.bak $MOZ_FILE
}


if [ -s $MOZ_FILE ] && [ -s $OCI_FILE ]; then

[[ -f lacells.db ]] && {
  if [[ $KEEP_FILES -eq 0 ]]; then
    rm lacells.db
  else
    mv lacells.db.bak
  fi
}
echo "Generating database"

sqlite3 lacells.db <<-SQL
PRAGMA synchronous = OFF;
PRAGMA journal_mode = OFF;

CREATE TEMP TABLE cells_import (radio TEXT,mcc INTEGER,mnc INTEGER,lac INTEGER,cid INTEGER,unit STRING,longitude NUMERIC,latitude NUMERIC,accuracy INTEGER,samples INTEGER,changeable BOOLEAN,created INTEGER,updated INTEGER, avgSignal INTEGER);
CREATE TABLE cells (mcc INTEGER,mnc INTEGER,lac INTEGER,cid INTEGER,longitude REAL,latitude REAL,altitude REAL,accuracy REAL,samples INTEGER);

.header on
.mode csv

.import "$OCI_FILE" cells_import
.import "$MOZ_FILE" cells_import

UPDATE cells_import SET samples=1 WHERE samples IS NULL OR samples < 1;

INSERT INTO cells
SELECT mcc, mnc, lac, cid,
  sum(longitude * samples) / sum(samples) as longitude,
  sum(latitude  * samples) / sum(samples) as latitude,
  -1 as altitude,
  sum(accuracy  * samples) / sum(samples) as accuracy,
  sum(samples) as samples
FROM cells_import
GROUP BY mcc, mnc, lac, cid;

DROP TABLE cells_import;

UPDATE cells SET accuracy=500 WHERE accuracy < 500;
UPDATE cells SET accuracy=100000 WHERE accuracy > 100000;

CREATE INDEX _idx1 ON cells (mcc, mnc, lac, cid);
CREATE INDEX _idx2 ON cells (lac, cid);

VACUUM;
SQL

else
  echo "Download error"
fi

if [[ $KEEP_FILES -eq 0 ]]; then
  rm $OCI_FILE
  rm $MOZ_FILE
else
  mv $OCI_FILE ${OCI_FILE}.bak
  mv $MOZ_FILE ${MOZ_FILE}.bak
fi
